{"version":3,"sources":["webpack:///../packages/rehypex/doc/better-media.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","name","type","default","desc","isMDXComponent"],"mappings":"+fAOO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,0JACA,sBACE,kBAAIC,WAAW,MAAf,aAAkC,kBAAIA,WAAW,MAAf,SAAlC,OAA4E,kBAAIA,WAAW,MAAf,SAA5E,UACA,kBAAIA,WAAW,MAAf,SAA8B,kBAAIA,WAAW,MAAf,SAA9B,KAAsE,kBAAIA,WAAW,MAAf,UAAtE,WAAqH,kBAAIA,WAAW,MAAf,SAArH,8CACA,kBAAIA,WAAW,MAAf,wFAEF,iBAAQ,CACN,GAAM,aADR,aAGA,YAAC,IAAD,CAAWD,QAAQ,aAChB,CACCE,KAAM,YACNC,KAAM,QACNC,QAAS,oCACTC,KAAM,6IAEP,CACCH,KAAM,cACNC,KAAM,SACNC,QAAS,wBACTC,KAAM,2MAEP,CACCH,KAAM,eACNC,KAAM,SACNC,QAAS,KACTC,KAAM,mGAGV,iBAAQ,CACN,GAAM,SADR,SAGA,0DAAyC,0BAAYJ,WAAW,KAAvB,iBAAzC,iCAAoI,kBAAIA,WAAW,MAAnJ,gDAC0C,kBAAIA,WAAW,KAAf,aAD1C,OACuF,0BAAYA,WAAW,KAAvB,eADvF,YAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yeA2BL,iBAAQ,CACN,GAAM,YADR,YAGA,oFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sLAOL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wSAQL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4JAOL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gM,yNAWTJ,EAAWS,gBAAiB","file":"component---packages-rehypex-doc-better-media-doc-mdx-f8213e485025936628ae.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"better-media\"\n    }}>{`Better Media`}</h1>\n    <p>{`Auto Import is a Rehype plugin for MDXHAST that transforms HAST img nodes into JSX nodes, performing the following modifications:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create an `}<em parentName=\"li\">{`image`}</em>{` or `}<em parentName=\"li\">{`video`}</em>{` node.`}</li>\n      <li parentName=\"ul\">{`Parse `}<em parentName=\"li\">{`width`}</em>{`, `}<em parentName=\"li\">{`height`}</em>{` and/or `}<em parentName=\"li\">{`style`}</em>{` properties from the alternate text field.`}</li>\n      <li parentName=\"ul\">{`Parse other properties (eg. controls, autoplay, loop) from the alternate text field`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'videoTest',\n        type: 'regex',\n        default: '/\\.(mp4|webm|avi|mpe?g|wmv|ogg)$/i',\n        desc: 'Regular expression that is used to test the source of the element, in order to determine whether it should create an image or video node.'\n      }}\n      {{\n        name: 'videoMarker',\n        type: 'string',\n        default: 'null (not being used)',\n        desc: 'If the source of the video starts with this string, it is considered to be a video, disregarding the `videoTest` regex. This is useful for having videos with online URLs which might not end in _.EXT_'\n      }}\n      {{\n        name: 'altSeparator',\n        type: 'string',\n        default: '&&',\n        desc: 'Separator used in the alternate text field of the image node, in order to add extra properties'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`To use this plugin, put it in the `}<inlineCode parentName=\"p\">{`rehypePlugins`}</inlineCode>{` option of your MDX-JS loader.`}<br parentName=\"p\"></br>{`\n`}{`In this example we also pass the string `}<em parentName=\"p\">{`'!video!'`}</em>{` as `}<inlineCode parentName=\"p\">{`videoMarker`}</inlineCode>{` option.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Webpack example\nconst rehypeBetterMedia = require('@mdxp/rehypex-plugins/better-media');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\\\.mdx$/,\n        use: [\n          'babel-loader',\n          {\n            loader: '@mdx-js/loader',\n            options: {\n              rehypePlugins: [\n                [rehypeBetterMedia, {videoMarker: '!video!'}]\n              ]\n            }\n          }\n        ]\n      },\n      ...\n    ]\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <p>{`Once the plugin is setup, you can write the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`![logo image](./path/to/logo.png \"An image of my logo\")\n\n// Gets transformed by the plugin to:\n<img alt=\"logo image\" src=\"./path/to/logo.png\" title=\"An image of my logo\" />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Note that style should be defined as a JSX property (double braces)\n![image&&style={{border: '5px solid red'}}&&width='80%'](./path/to/image.jpg)\n\n// Gets transformed by the plugin to:\n<img alt=\"image\" src=\"./path/to/image.jpg\" style={{border: '5px solid red', width: '80%'}} />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`![video&&autoplay&&loop](./path/to/video.mp4)\n\n// Gets transformed by the plugin to:\n<video alt=\"video\" src=\"./path/to/video.mp4\" autoplay loop />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`![online video&&controls](!video!https://www.thiscoolvideo.com)\n\n// Gets transformed by the plugin to:\n<video alt=\"online video\" src=\"https://www.thiscoolvideo.com\" controls />\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}