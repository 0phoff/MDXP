{"version":3,"sources":["webpack:///../packages/core/doc/hook.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","nameCol","values","parentName","isMDXComponent"],"mappings":"8fAOO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,oIACA,YAAC,IAAD,CAAQC,QAAQ,MAAMC,OAAQ,CAAC,CAAC,OAAQ,CAAC,YAAa,wBAAyB,2DAA4D,CAAC,cAAe,aAAc,iCAAkC,CAAC,aAAc,4BAA6B,+BAAgC,CAAC,aAAc,aAAc,oDAAqD,CAAC,YAAa,2BAA4B,8BAA+B,CAAC,eAAgB,SAAU,uCAAwC,CAAC,UAAW,OAAQ,qGAAsGF,QAAQ,WACvnB,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,iBADZ,iMAcL,uBACA,iBAAQ,CACN,GAAM,WADR,WAGA,mGACA,YAAC,IAAD,CAAKD,OAAQ,CAAC,CAAC,SAAU,aAAc,8CAA+CF,QAAQ,QAC9F,YAAC,IAAD,CAAQE,OAAQ,CAAC,CAAC,YAAa,uBAAwB,wDAAyDF,QAAQ,WACxH,8BACE,iBAAGG,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,6CACqC,mBAAGA,WAAW,KAAQ,CACvD,KAAQ,+BADyB,QADrC,8GAMF,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8QAeL,uBACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,mGACA,YAAC,IAAD,CAAQF,QAAQ,MAAMC,OAAQ,CAAC,CAAC,OAAQ,aAAc,uCAAwC,CAAC,WAAY,aAAc,2CAA4C,CAAC,YAAa,0BAA2B,kDAAmD,CAAC,gBAAiB,0BAA2B,sDAAuD,CAAC,WAAY,gEAAiE,0GAA2G,CAAC,UAAW,0BAA2B,0CAA2CF,QAAQ,WACxnB,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,iBADZ,uS,8MAkBTN,EAAWO,gBAAiB","file":"component---packages-core-doc-hook-doc-mdx-9f6e7111a3048c6ff0bc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdx-presenter/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Arg, Return } from 'gatsby-theme-docz/src/components/tables.jsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"usedeck\"\n    }}>{`useDeck`}</h2>\n    <p>{`This hook returns the deck context, which is an object with useful information about the state of the deck.`}</p>\n    <Return nameCol='Key' values={[['mode', ['deckModes', '/core-util#deckmodes'], 'The mode that the slide deck is currently displayed as.'], ['slideLength', 'number > 0', 'Number of slides in the deck.'], ['slideIndex', 'number ∈ [0, slideLength[', 'Index of the current slide.'], ['stepLength', 'number > 0', 'Number of steps that the current slide contains.'], ['stepIndex', 'number ∈ [0, stepLength[', 'Index of the current step.'], ['rawStepIndex', 'string', 'Raw step value, as seen in the URL.'], ['preview', 'bool', 'Whether the slide should be rendered in a static preview mode (mainly used for printing to pdf).']]} mdxType=\"Return\" />\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useDeck} from '@MDXP/core'\n\nconst Footer = (props) => {\n  const deck = useDeck();\n\n  return (\n    <span>\n      {deck.slideIndex} / {deck.slideLength}\n    </span>\n  );\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usestep\"\n    }}>{`useStep`}</h2>\n    <p>{`This hook allows to allocate a certain number of steps for your component.`}</p>\n    <Arg values={[['length', 'number > 0', 'The number of steps you need to allocate.']]} mdxType=\"Arg\" />\n    <Return values={[['stepIndex', 'number ∈ [-1,length[', 'The current stepIndex your component should follow.']]} mdxType=\"Return\" />\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`If your component is being used in a `}<a parentName=\"p\" {...{\n          \"href\": \"/MDXP/core-components#Step\"\n        }}>{`Step`}</a>{`,\nthe returned stepIndex might be -1 to indicate that your component has not been \"stepped\" through yet.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useStep} from '@MDXP/core'\n\nconst ChangeColor = ({children}) => {\n  const colors = ['red', 'green', 'blue'];\n  const stepIndex = useStep(colors.length);\n\n  return (\n    <div style={{color: colors[stepIndex]}}>\n      {children}\n    </div>\n  );\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usenavigation\"\n    }}>{`useNavigation`}</h2>\n    <p>{`This hooks returns an object with a number of useful navigation functions.`}</p>\n    <Return nameCol='Key' values={[['next', '() => void', 'Navigate to the next step or slide.'], ['previous', '() => void', 'Navigate to the previous step or slide.'], ['nextSlide', '(step=0:number) => void', 'Navigate to the next slide and specified step.'], ['previousSlide', '(step=0:number) => void', 'Navigate to the previous slide and specified step.'], ['navigate', '(slide:number, step=0:Integer, replace=false:Boolean) => void', 'Navigate to the specified slide and step, deciding whether to replace history or add a new page to it.'], ['setMode', '(mode:deckMode) => void', 'Set the display mode the presentation']]} mdxType=\"Return\" />\n    <h3 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useNavigation} from '@MDXP/core'\n\nconst LinkSlide = ({slide, step, text}) => {\n  const {navigate} = useNavigation();   // Destructure object to extract only navigate\n\n  return (\n    <button onClick={() => {navigate(slide, step)}}>\n      {text}\n    </button>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}