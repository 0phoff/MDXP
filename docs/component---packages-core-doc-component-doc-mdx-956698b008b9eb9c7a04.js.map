{"version":3,"sources":["webpack:///../packages/core/doc/component.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Deck","parentName","name","type","required","desc","Step","isMDXComponent"],"mappings":"kiBAUO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,+FACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAWC,GAAIC,IAAMF,QAAQ,cAC7B,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,iBADZ,4JAWL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,yHACM,mBAAGA,WAAW,KAAQ,CACxB,KAAQ,wCADN,gBADN,6CAIA,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,SAAyC,kBAAIA,WAAW,MAAnF,+NAIF,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAWH,QAAQ,aAChB,CACCI,KAAM,WACNC,KAAM,OACNC,UAAU,EACVC,KAAM,kFAGV,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,sBAAMJ,WAAW,OAAU,CAC5B,UAAa,gBADZ,yTAeL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,kOACyH,0BAAYA,WAAW,KAAvB,aADzH,8EAGA,oOAEe,0BAAYA,WAAW,KAAvB,cAFf,cAGA,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAWF,GAAIO,IAAMR,QAAQ,cAC7B,8BACE,iBAAGG,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,mFAEA,kBAAIA,WAAW,cACb,kBAAIA,WAAW,MAAf,6BAAkD,0BAAYA,WAAW,MAAvB,QAAlD,YACA,kBAAIA,WAAW,MAAf,gHAAqI,0BAAYA,WAAW,MAAvB,UAArI,KACA,kBAAIA,WAAW,MAAf,mEAAwF,0BAAYA,WAAW,MAAvB,WAAxF,kBACA,kBAAIA,WAAW,MAAf,mHAAwI,0BAAYA,WAAW,MAAvB,SAAxI,MAEF,iBAAGA,WAAW,cAAd,2HACA,kBAAIA,WAAW,cACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAGxB,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mgC,mNAyDTN,EAAWY,gBAAiB","file":"component---packages-core-doc-component-doc-mdx-956698b008b9eb9c7a04.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nimport Deck from '../src/components/deck.jsx';\nimport Head from '../src/components/head.jsx';\nimport Step from '../src/components/step.jsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"deck\"\n    }}>{`Deck`}</h2>\n    <p>{`This is the main component, which creates the slide deck on your page.`}</p>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Deck} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Presentation from 'my-presentation.mdx'\n\nReactDOM.render(\n  <Deck>\n    <Presentation />\n  </Deck>,\n  document.getElementById('root')\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"head\"\n    }}>{`Head`}</h2>\n    <p>{`This component allows you to set metadata of your presentation inside of your MDX file.\nIt uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/nfl/react-helmet\"\n      }}>{`React-Helmet`}</a>{` in order to insert your tags at runtime.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong><br parentName=\"p\"></br>{`\n`}{`This component needs to be a direct child of your slide and cannot be nested inside other components.\nAt runtime, all the Head components get filtered out of your slides and placed at the top of the presentation.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties-1\"\n    }}>{`Properties`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'children',\n        type: 'node',\n        required: false,\n        desc: 'Valid elements that can be set in the HTML Head section through react-helmet.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Head>\n<title>My Awesome Presentation</tite>\n<meta name=\"description\" content=\"This is my awesome web based presentation\" />\n<meta name=\"author\" content=\"0phoff\" />\n<meta name=\"keywords\" content=\"Presentations, Slides, Deck, React, Web, HTML, CSS, JavaScript\" />\n</Head>\n\n# SLIDE 1\n\nContent\n\n---\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"step\"\n    }}>{`Step`}</h2>\n    <p>{`This component can be used inside your slides, to step through certain items.\nIt generates a step for each of its direct children and can style them depending on their respective order and the current `}<inlineCode parentName=\"p\">{`stepIndex`}</inlineCode>{`.\nThe most common use case is to make items appear or disappear in order.`}</p>\n    <p>{`If this component only has one child, it will implement the stepping behaviour on it's children.\nIf the child component happens to be a table, it will step through its rows or columns,\ndepending on the `}<inlineCode parentName=\"p\">{`useColumns`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"properties-2\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Step} mdxType=\"Arguments\" />\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`The styles are applied to the children according to the following rules:  `}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`All children elements get `}<inlineCode parentName=\"li\">{`base`}</inlineCode>{` styles.`}</li>\n        <li parentName=\"ul\">{`Children whose index is greater than the stepIndex (aka they have not been stepped through), get styled with `}<inlineCode parentName=\"li\">{`before`}</inlineCode>{`.`}</li>\n        <li parentName=\"ul\">{`Children whose index is equal to the stepIndex, get styled with `}<inlineCode parentName=\"li\">{`current`}</inlineCode>{` if it exists.`}</li>\n        <li parentName=\"ul\">{`Children whose index is smaller or equal to the stepIndex (aka they have been stepped through), get styled with `}<inlineCode parentName=\"li\">{`after`}</inlineCode>{`.`}</li>\n      </ul>\n      <p parentName=\"blockquote\">{`When different styles get applied to a child element, they get combined using spread operators, in the following order:`}</p>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.base`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.before`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.after`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.current`}</inlineCode></li>\n      </ol>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\n\n<Step>\n\nBy wrapping your content in a \\`<Step />\\`, you can uncover them one by one.\n\nPretty neat right ?  \n\n</Step>\n\n---\n\n# SLIDE 2\n\n<Step offset={0}>\n\nYou can even mix and match different types of elements.  \nHere we show a paragraph.\n\n1. And here is a numbered list.\n2. Damn, all elements show up at once\n3. What could we do to solve this ?\n\n<Step>\n\n- Can we nest \\`<Step />\\` components ?\n- Sure we can\n- And if it only has one child, it will step through its children\n- Now that's wicked!\n\n</Step>\n</Step>\n\n---\n\n# SLIDE 3\n\n<Step styles={{\n  base:     {transition: 'opacity 0.5s ease-in-out'},\n  before:   {opacity: 0},\n  after:    {opacity: 1},\n}}>\n\n- We can also apply some basic styling for the different states\n- This can allow for some really modern looking slides\n- People will look in awe at your beatifully crafted slide deck\n- Sadly, this demo runtime makes everything flicker\n- But trust me, this is not the case with real slide decks!\n\n</Step>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}