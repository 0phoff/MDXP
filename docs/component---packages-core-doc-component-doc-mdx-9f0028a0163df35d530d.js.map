{"version":3,"sources":["webpack:///../packages/core/doc/component.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Deck","parentName","Step","isMDXComponent"],"mappings":"shBASO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,+FACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAWC,GAAIC,IAAMF,QAAQ,cAC7B,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMG,WAAW,OAAU,CAC5B,UAAa,iBADZ,4JAWL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,kOACyH,0BAAYA,WAAW,KAAvB,aADzH,8EAGA,oOAEe,0BAAYA,WAAW,KAAvB,cAFf,cAGA,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAWF,GAAIG,IAAMJ,QAAQ,cAC7B,8BACE,iBAAGG,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,mFAEA,kBAAIA,WAAW,cACb,kBAAIA,WAAW,MAAf,6BAAkD,0BAAYA,WAAW,MAAvB,QAAlD,YACA,kBAAIA,WAAW,MAAf,gHAAqI,0BAAYA,WAAW,MAAvB,UAArI,KACA,kBAAIA,WAAW,MAAf,mEAAwF,0BAAYA,WAAW,MAAvB,WAAxF,kBACA,kBAAIA,WAAW,MAAf,mHAAwI,0BAAYA,WAAW,MAAvB,SAAxI,MAEF,iBAAGA,WAAW,cAAd,2HACA,kBAAIA,WAAW,cACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAGxB,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ga,mNAyBTN,EAAWQ,gBAAiB","file":"component---packages-core-doc-component-doc-mdx-9f0028a0163df35d530d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nimport Deck from '../src/components/deck.jsx';\nimport Step from '../src/components/step.jsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"deck\"\n    }}>{`Deck`}</h2>\n    <p>{`This is the main component, which creates the slide deck on your page.`}</p>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Deck} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Presentation from 'my-presentation.mdx'\n\nReactDOM.render(\n  <Deck>\n    <Presentation />\n  </Deck>,\n  document.getElementById('root')\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"step\"\n    }}>{`Step`}</h2>\n    <p>{`This component can be used inside your slides, to step through certain items.\nIt generates a step for each of its direct children and can style them depending on their respective order and the current `}<inlineCode parentName=\"p\">{`stepIndex`}</inlineCode>{`.\nThe most common use case is to make items appear or disappear in order.`}</p>\n    <p>{`If this component only has one child, it will implement the stepping behaviour on it's children.\nIf the child component happens to be a table, it will step through its rows or columns,\ndepending on the `}<inlineCode parentName=\"p\">{`useColumns`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"properties-1\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Step} mdxType=\"Arguments\" />\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`The styles are applied to the children according to the following rules:  `}</p>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\">{`All children elements get `}<inlineCode parentName=\"li\">{`base`}</inlineCode>{` styles.`}</li>\n        <li parentName=\"ol\">{`Children whose index is greater than the stepIndex (aka they have not been stepped through), get styled with `}<inlineCode parentName=\"li\">{`before`}</inlineCode>{`.`}</li>\n        <li parentName=\"ol\">{`Children whose index is equal to the stepIndex, get styled with `}<inlineCode parentName=\"li\">{`current`}</inlineCode>{` if it exists.`}</li>\n        <li parentName=\"ol\">{`Children whose index is smaller or equal to the stepIndex (aka they have been stepped through), get styled with `}<inlineCode parentName=\"li\">{`after`}</inlineCode>{`.`}</li>\n      </ol>\n      <p parentName=\"blockquote\">{`When different styles get applied to a child element, they get combined using spread operators, in the following order:`}</p>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.base`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.before`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.after`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.current`}</inlineCode></li>\n      </ol>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`# My awesome slide\n\n<!-- This will uncover the items from the list one after the other with a nice opacity transition,\n     and will highlight the current item in red. -->\n<Step styles={{\n  base:     {transition: 'opacity 0.5s ease-in-out'},\n  before:   {opacity: 0},\n  after:    {opacity: 1},\n  current:  {color: 'red'},\n}}>\n\n- Item 1\n- Item 2\n- Item 3\n- Item 4\n- Item 5\n\n</Step>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}