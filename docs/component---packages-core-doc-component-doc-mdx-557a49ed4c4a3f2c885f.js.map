{"version":3,"sources":["webpack:///../packages/core/doc/component.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Deck","parentName","name","type","desc","default","required","Step","Zoom","isMDXComponent"],"mappings":"wSAWaA,G,UAAe,S,qNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,QADR,QAGA,+FACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAWC,GAAIC,IAAMF,QAAQ,cAC7B,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,gCAAMG,WAAW,OAAU,CAC5B,UAAa,iBADZ,4JAWL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,wHACA,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAWH,QAAQ,aAChB,CACCI,KAAM,QACNC,KAAM,SACNC,KAAM,wCACNC,QAAS,KAEV,CACCH,KAAM,MACNC,KAAM,SACNC,KAAM,mJACNC,QAAS,KAEV,CACCH,KAAM,WACNC,KAAM,OACNG,UAAU,IAGd,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,gCAAML,WAAW,OAAU,CAC5B,UAAa,gBADZ,uhBAwCL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,kOACyH,0BAAYA,WAAW,KAAvB,aADzH,8EAGA,oOAEe,0BAAYA,WAAW,KAAvB,cAFf,cAGA,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAWF,GAAIQ,IAAMT,QAAQ,cAC7B,8BACE,iBAAGG,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,mFAEA,kBAAIA,WAAW,cACb,kBAAIA,WAAW,MAAf,6BAAkD,0BAAYA,WAAW,MAAvB,QAAlD,YACA,kBAAIA,WAAW,MAAf,gHAAqI,0BAAYA,WAAW,MAAvB,UAArI,KACA,kBAAIA,WAAW,MAAf,mEAAwF,0BAAYA,WAAW,MAAvB,WAAxF,kBACA,kBAAIA,WAAW,MAAf,mHAAwI,0BAAYA,WAAW,MAAvB,SAAxI,MAEF,iBAAGA,WAAW,cAAd,2HACA,kBAAIA,WAAW,cACb,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAGxB,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6/BAqDL,uBACA,iBAAQ,CACN,GAAM,QADR,QAGA,gGACA,kJAAiI,kBAAIA,WAAW,MAAhJ,kIAEA,iBAAQ,CACN,GAAM,gBADR,cAGA,YAAC,IAAD,CAAWF,GAAIS,IAAMV,QAAQ,oB,mNAKjCH,EAAWc,gBAAiB","file":"component---packages-core-doc-component-doc-mdx-557a49ed4c4a3f2c885f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nimport Deck from '../src/components/deck.jsx';\nimport Note from '../src/components/note.jsx';\nimport Step from '../src/components/step.jsx';\nimport Zoom from '../src/components/zoom.jsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"deck\"\n    }}>{`Deck`}</h2>\n    <p>{`This is the main component, which creates the slide deck on your page.`}</p>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Deck} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import Presentation from 'my-presentation.mdx'\n\nReactDOM.render(\n  <Deck>\n    <Presentation />\n  </Deck>,\n  document.getElementById('root')\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"note\"\n    }}>{`Note`}</h2>\n    <p>{`This component can be used to add notes to certain slides, which can be used in presenter mode.`}</p>\n    <h3 {...{\n      \"id\": \"properties-1\"\n    }}>{`Properties`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'start',\n        type: 'number',\n        desc: 'On which stepIndex to show this note.',\n        default: '0'\n      }}\n      {{\n        name: 'end',\n        type: 'number',\n        desc: 'Until which stepIndex to show this note. If the number is smaller or equal to zero, we start counting backwards from the last step of the slide.',\n        default: '0'\n      }}\n      {{\n        name: 'children',\n        type: 'node',\n        required: false\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`# SLIDE 1\n\nThis is the first slide.\n\n<Note>\n\nThese are notes that are only shown in presenter mode.  \nThey can help you not to forget what you need to say.\n\n- You can also use markdown syntax inside of here!\n- This will work as __intended__\n\n</Note>\n\n---\n\n# SLIDE 2\n\n<Step>\n\n- This slide contains 3 steps\n- Step 2\n- Step 3\n\n</Step>\n\n<Note end=\"-1\">\n\nThis note will be removed for the last step of this slide.\n\n</Note>\n\n<Note start=\"1\">\n\nThis note will only show with the second step.\n\n</Note>\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"step\"\n    }}>{`Step`}</h2>\n    <p>{`This component can be used inside your slides, to step through certain items.\nIt generates a step for each of its direct children and can style them depending on their respective order and the current `}<inlineCode parentName=\"p\">{`stepIndex`}</inlineCode>{`.\nThe most common use case is to make items appear or disappear in order.`}</p>\n    <p>{`If this component only has one child, it will implement the stepping behaviour on it's children.\nIf the child component happens to be a table, it will step through its rows or columns,\ndepending on the `}<inlineCode parentName=\"p\">{`useColumns`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"properties-2\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Step} mdxType=\"Arguments\" />\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`The styles are applied to the children according to the following rules:  `}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`All children elements get `}<inlineCode parentName=\"li\">{`base`}</inlineCode>{` styles.`}</li>\n        <li parentName=\"ul\">{`Children whose index is greater than the stepIndex (aka they have not been stepped through), get styled with `}<inlineCode parentName=\"li\">{`before`}</inlineCode>{`.`}</li>\n        <li parentName=\"ul\">{`Children whose index is equal to the stepIndex, get styled with `}<inlineCode parentName=\"li\">{`current`}</inlineCode>{` if it exists.`}</li>\n        <li parentName=\"ul\">{`Children whose index is smaller or equal to the stepIndex (aka they have been stepped through), get styled with `}<inlineCode parentName=\"li\">{`after`}</inlineCode>{`.`}</li>\n      </ul>\n      <p parentName=\"blockquote\">{`When different styles get applied to a child element, they get combined using spread operators, in the following order:`}</p>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.base`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.before`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.after`}</inlineCode></li>\n        <li parentName=\"ol\"><inlineCode parentName=\"li\">{`styles.current`}</inlineCode></li>\n      </ol>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\n\n<Step>\n\nBy wrapping your content in a \\`<Step />\\`, you can uncover them one by one.\n\nPretty neat right ?  \n\n</Step>\n\n---\n\n# SLIDE 2\n\n<Step offset={0}>\n\nYou can even mix and match different types of elements.  \nHere we show a paragraph.\n\n1. And here is a numbered list.\n2. Damn, all elements show up at once\n3. What could we do to solve this ?\n\n<Step>\n\n- Can we nest \\`<Step />\\` components ?\n- Sure we can\n- And if it only has one child, it will step through its children\n- Now that's wicked!\n\n</Step>\n</Step>\n\n---\n\n# SLIDE 3\n\n<Step styles={{\n  base:     {transition: 'opacity 0.5s ease-in-out'},\n  before:   {opacity: 0},\n  after:    {opacity: 1},\n}}>\n\n- We can also apply some basic styling for the different states\n- This can allow for some really modern looking slides\n- People will look in awe at your beatifully crafted slide deck\n- Sadly, this demo runtime makes everything flicker\n- But trust me, this is not the case with real slide decks!\n\n</Step>\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"zoom\"\n    }}>{`Zoom`}</h2>\n    <p>{`Zoom the content inside of it to a fixed aspect ratio with css scaling.`}</p>\n    <p>{`This component has not much to do with presentations, but is used throughout the core codebase and might be useful to use.`}<br parentName=\"p\"></br>{`\n`}{`One of its use cases is to wrap your presentation, so that you keep the same look of your presentation on small displays.`}</p>\n    <h3 {...{\n      \"id\": \"properties-3\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Zoom} mdxType=\"Arguments\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}