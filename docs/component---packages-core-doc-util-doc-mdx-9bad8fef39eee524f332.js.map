{"version":3,"sources":["webpack:///../packages/core/doc/util.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","values","isMDXComponent"],"mappings":"ggBAOO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,2HAC0B,0BAAYC,WAAW,KAAvB,aAD1B,sBACsG,mBAAGA,WAAW,KAAQ,CACxH,KAAQ,mCAD0F,iBADtG,UAIA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uHAUL,uBACA,iBAAQ,CACN,GAAM,aADR,aAGA,2NAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4dAgCL,uBACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,qHAC4B,mBAAGA,WAAW,KAAQ,CAC9C,KAAQ,+BADgB,QAD5B,eAIA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kgDAmFL,uBACA,iBAAQ,CACN,GAAM,eADR,eAGA,sIACA,YAAC,IAAD,CAAKC,OAAQ,CAAC,CAAC,YAAa,SAAU,kDAAmDF,QAAQ,QACjG,YAAC,IAAD,CAAQE,OAAQ,CAAC,CAAC,gBAAiB,SAAU,0FAA2FF,QAAQ,WAChJ,uBACA,iBAAQ,CACN,GAAM,aADR,aAGA,+GAA8F,kBAAIC,WAAW,MAA7G,+FAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wDAOL,uBACA,iBAAQ,CACN,GAAM,eADR,eAGA,4FACA,YAAC,IAAD,CAAKC,OAAQ,CAAC,CAAC,YAAa,gBAAiB,gEAAiEF,QAAQ,QACtH,YAAC,IAAD,CAAQE,OAAQ,CAAC,CAAC,OAAQ,CAAC,YAAa,cAAe,2CAA4CF,QAAQ,WAC3G,uBACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,mHACA,YAAC,IAAD,CAAKE,OAAQ,CAAC,CAAC,YAAa,gBAAiB,gEAAiEF,QAAQ,QACtH,YAAC,IAAD,CAAQE,OAAQ,CAAC,CAAC,YAAa,gBAAiB,4CAA6CF,QAAQ,WACrG,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,gW,8MAwBTJ,EAAWM,gBAAiB","file":"component---packages-core-doc-util-doc-mdx-9bad8fef39eee524f332.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdx-presenter/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Arg, Return } from 'gatsby-theme-docz/src/components/tables.jsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"deckmodes\"\n    }}>{`deckModes`}</h2>\n    <p>{`Enum object which contains the different modes for the deck to be in.\nIt can be used for with the `}<inlineCode parentName=\"p\">{`setMode()`}</inlineCode>{` function from the `}<a parentName=\"p\" {...{\n        \"href\": \"/MDXP/core-hooks#usenavigation\"\n      }}>{`useNavigation`}</a>{` hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const deckModes = {\n  NORMAL:     0,\n  PRESENTER:  1,\n  OVERVIEW:   2,\n  GRID:       3,\n  PRINT:      4,\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"basetheme\"\n    }}>{`baseTheme`}</h2>\n    <p>{`Base theme object that is always being merged into the given theme, to provide sane defaults for some things.\nYou can overwrite any of its properties by providing your own values in your theme.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const baseTheme = {\n  colors: {\n    text: '#000',\n    background: '#FFF'\n  },\n  fonts: {\n    body: 'system-ui, sans-serif',\n  },\n  fontWeights: {\n    body: 400\n  },\n  lineHeights: {\n    body: 1.5\n  },\n  styles: {\n    root: {\n      fontFamily: 'system-ui, sans-serif'\n    },\n    img: {\n      width: '100%',\n      maxHeight: '100%',\n      objectFit: 'contain'\n    },\n    Slide: {\n      fontFamily: 'body',\n      fontSize: '1.5rem'\n    }\n  }\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"defaulttheme\"\n    }}>{`defaultTheme`}</h2>\n    <p>{`This is the default theme that is used for your presentation,\nif you do not give one to the `}<a parentName=\"p\" {...{\n        \"href\": \"/MDXP/core-components#deck\"\n      }}>{`Deck`}</a>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const defaultTheme = {\n  colors: {\n    text: '#000',\n    background: '#FFF',\n    primary: '#CCC',\n    secondary: '#555',\n    accent: '#F9AC00',\n    muted: '#888'\n  },\n  fonts: {\n    heading: 'inherit',\n    monospace: 'Menlo, monospace'\n  },\n  fontWeights: {\n    heading: 700\n  },\n  lineHeights: {\n    heading: 1.125\n  },\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  text: {\n    heading: {\n      fontFamily: 'heading',\n      fontWeight: 'heading',\n      lineHeight: 'heading',\n      textAlign: 'center'\n    }\n  },\n  styles: {\n    h1: {\n      variant: 'text.heading',\n      textTransform: 'uppercase'\n    },\n    h2: {\n      variant: 'text.heading'\n    },\n    h3: {\n      variant: 'text.heading'\n    },\n    h4: {\n      variant: 'text.heading'\n    },\n    h5: {\n      variant: 'text.heading'\n    },\n    h6: {\n      variant: 'text.heading'\n    },\n    code: {\n      fontFamily: 'monospace'\n    },\n    pre: {\n      fontFamily: 'monospace'\n    },\n    table: {\n      fontSize: 'inherit',\n      borderCollapse: 'collapse',\n      borderStyle: 'hidden',\n    },\n    tr : {\n      '& > :first-child': {paddingLeft: 0},\n      '& > :last-child': {paddingRight: 0}\n    },\n    th: {\n      fontWeight: 'bold',\n      borderColor: 'inherit',\n      borderStyle: 'solid',\n      borderWidth: '0 0 2px 0',\n      px: 3,\n      py: 3\n    },\n    td: {\n      borderColor: 'inherit',\n      borderStyle: 'solid',\n      borderWidth: '0 0 1px 0',\n      px: 3,\n      py: 2\n    }\n  }\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"mergethemes\"\n    }}>{`mergeThemes`}</h2>\n    <p>{`This function can be used to merge different theme objects together, overwriting with the latest theme given.`}</p>\n    <Arg values={[['...themes', 'Object', 'The theme objects you want to merge together.']]} mdxType=\"Arg\" />\n    <Return values={[['combinedTheme', 'Object', 'New Theme-UI theme object, which is the result of merging all passed themes together.']]} mdxType=\"Return\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"mdxptypes\"\n    }}>{`MDXPTypes`}</h2>\n    <p>{`Some components hold a special meaning for the MDXP code and will be handled specially.`}<br parentName=\"p\"></br>{`\n`}{`This is the enum object which contains the different types of special MDXP components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MDXPTypes = {\n  NONE: 0,\n  LAYOUT: 1,\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmdxptype\"\n    }}>{`getMDXPType`}</h2>\n    <p>{`This function can be used to retrieve the MDXP type of a component.`}</p>\n    <Arg values={[['component', 'componentType', 'Component of which you would like to know the MDXP type of.']]} mdxType=\"Arg\" />\n    <Return values={[['type', ['MDXPTypes', '#mdxptypes'], 'Type of the component (default: NONE).']]} mdxType=\"Return\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setmdxplayouttype\"\n    }}>{`setMDXPLayoutType`}</h2>\n    <p>{`This is a higher-order component, which turns your component into a MDXP layout component.`}</p>\n    <Arg values={[['component', 'componentType', 'Component of which you would like to be a layout component.']]} mdxType=\"Arg\" />\n    <Return values={[['component', 'componentType', 'MDXP Layout component of your component']]} mdxType=\"Return\" />\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {setMDXPLayoutType} from '@MDXP/core'\n\nconst TomatoLayout = ({children, ...props}) => (\n  <div\n    style={{\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      backgroundColor: 'tomato',\n      color: 'white'\n    }}\n  >\n    {children}\n  </div>\n)\n\nexport default setMDXPLayoutType(TomatoLayout);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}