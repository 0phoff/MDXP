{"version":3,"sources":["webpack:///../packages/core/doc/util.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","deckModes","pre","exclude","baseTheme","defaultTheme","MDXPTypes","transform","obj","prop","res","toString","padStart","name","type","desc","input","default","isMDXComponent"],"mappings":"sTAWaA,G,UAAe,S,gNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,2HAC0B,0BAAYC,WAAW,KAAvB,aAD1B,sBACsG,6BAAGA,WAAW,KAAQ,CACxH,KAAQ,mCAD0F,iBADtG,UAIA,YAAC,IAAD,CAAaC,GAAIC,IAAWC,IAAI,qBAAqBC,QAAQ,aAAaL,QAAQ,gBAClF,uBACA,iBAAQ,CACN,GAAM,aADR,aAGA,2NAEA,YAAC,IAAD,CAAaE,GAAII,IAAWF,IAAI,qBAAqBJ,QAAQ,gBAC7D,uBACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,qHAC4B,6BAAGC,WAAW,KAAQ,CAC9C,KAAQ,+BADgB,QAD5B,eAIA,YAAC,IAAD,CAAaC,GAAIK,IAAcH,IAAI,wBAAwBJ,QAAQ,gBACnE,uBACA,iBAAQ,CACN,GAAM,aADR,aAGA,+GAA8F,kBAAIC,WAAW,MAA7G,+FAEA,YAAC,IAAD,CAAaC,GAAIM,IAAWJ,IAAI,qBAAqBK,UAAW,SAACC,EAAKC,EAAMC,GAAZ,MAAoB,KAAOF,EAAIC,GAAME,SAAS,GAAGC,SAAS,EAAG,MAAMd,QAAQ,gBAC3I,uBACA,iBAAQ,CACN,GAAM,eADR,eAGA,2GAA0F,6BAAGC,WAAW,KAAQ,CAC5G,KAAQ,eAD8E,YAA1F,KAGA,iBAAQ,CACN,GAAM,aADR,aAGA,YAAC,IAAD,CAAWD,QAAQ,aAChB,CACCe,KAAM,YACNC,KAAM,eAEP,CACCD,KAAM,eACNC,KAAM,0BACNC,KAAM,yEAGV,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAWC,OAAO,EAAOlB,QAAQ,aAC9B,CACCe,KAAM,YACNC,KAAM,gBAGV,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,gCAAMf,WAAW,OAAU,CAC5B,UAAa,gBADZ,4XAqBL,uBACA,iBAAQ,CACN,GAAM,eADR,eAGA,4FACA,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,qCAC6B,6BAAGA,WAAW,KAAQ,CAC/C,KAAQ,mBADiB,iBAD7B,6IAMF,iBAAQ,CACN,GAAM,eADR,aAGA,YAAC,IAAD,CAAWD,QAAQ,aAChB,CACCe,KAAM,YACNC,KAAM,eAEP,CACCD,KAAM,aACNC,KAAM,SACNG,QAAS,KACTF,KAAM,+JAGV,iBAAQ,CACN,GAAM,aADR,WAGA,YAAC,IAAD,CAAWC,OAAO,EAAOlB,QAAQ,aAC9B,CACCe,KAAM,OACNC,KAAM,0BACNC,KAAM,2CAGV,uBACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,kEAAiD,6BAAGhB,WAAW,KAAQ,CACnE,KAAQ,eADqC,YAAjD,OAGA,iBAAQ,CACN,GAAM,eADR,aAGA,YAAC,IAAD,CAAWD,QAAQ,aAChB,CACCe,KAAM,YACNC,KAAM,eAEP,CACCD,KAAM,OACNC,KAAM,2BAEP,CACCD,KAAM,aACNC,KAAM,SACNG,QAAS,KACTF,KAAM,+JAGV,iBAAQ,CACN,GAAM,aADR,WAGA,YAAC,IAAD,CAAWC,OAAO,EAAOlB,QAAQ,aAC9B,CACCe,KAAM,eACNC,KAAM,SAGV,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,gCAAMf,WAAW,OAAU,CAC5B,UAAa,gBADZ,0L,8MAaTJ,EAAWuB,gBAAiB","file":"component---packages-core-doc-util-doc-mdx-3bd8d87a7263fcab8710.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nimport ObjectProps from 'gatsby-theme-docz/src/components/object-props.jsx';\nimport deckModes from '../src/util/deck-modes.js';\nimport { defaultTheme, baseTheme } from '../src/util/theme.js';\nimport MDXPTypes from '../src/util/mdxp-types.js';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"deckmodes\"\n    }}>{`deckModes`}</h2>\n    <p>{`Enum object which contains the different modes for the deck to be in.\nIt can be used for with the `}<inlineCode parentName=\"p\">{`setMode()`}</inlineCode>{` function from the `}<a parentName=\"p\" {...{\n        \"href\": \"/MDXP/core-hooks#usenavigation\"\n      }}>{`useNavigation`}</a>{` hook.`}</p>\n    <ObjectProps of={deckModes} pre=\"const deckModes = \" exclude=\"properties\" mdxType=\"ObjectProps\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"basetheme\"\n    }}>{`baseTheme`}</h2>\n    <p>{`Base theme object that is always being merged into the given theme, to provide sane defaults for some things.\nYou can overwrite any of its properties by providing your own values in your theme.`}</p>\n    <ObjectProps of={baseTheme} pre=\"const baseTheme = \" mdxType=\"ObjectProps\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"defaulttheme\"\n    }}>{`defaultTheme`}</h2>\n    <p>{`This is the default theme that is used for your presentation,\nif you do not give one to the `}<a parentName=\"p\" {...{\n        \"href\": \"/MDXP/core-components#deck\"\n      }}>{`Deck`}</a>{` component.`}</p>\n    <ObjectProps of={defaultTheme} pre=\"const defaultTheme = \" mdxType=\"ObjectProps\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"mdxptypes\"\n    }}>{`MDXPTypes`}</h2>\n    <p>{`Some components hold a special meaning for the MDXP code and will be handled specially.`}<br parentName=\"p\"></br>{`\n`}{`This is the enum object which contains the different types of special MDXP components.`}</p>\n    <ObjectProps of={MDXPTypes} pre=\"const MDXPTypes = \" transform={(obj, prop, res) => '0b' + obj[prop].toString(2).padStart(8, '0')} mdxType=\"ObjectProps\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"setmdxptype\"\n    }}>{`setMDXPType`}</h2>\n    <p>{`This is a higher-order component, which turns turns your component into a specific `}<a parentName=\"p\" {...{\n        \"href\": \"#MDXPTypes\"\n      }}>{`MDXPType`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'component',\n        type: 'elementType'\n      }}\n      {{\n        name: '...MDXPTypes',\n        type: '[MDXPTypes](#mdxptypes)',\n        desc: 'You can pass multiple MDXPTypes to set the component as all of them.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: 'component',\n        type: 'elementType'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {MDXPTypes, setMDXPType} from '@mdxp/core'\n\nconst TomatoLayout = ({children, ...props}) => (\n  <div\n    style={{\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      backgroundColor: 'tomato',\n      color: 'white'\n    }}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\nexport default setMDXPType(TomatoLayout, MDXPTypes.LAYOUT);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getmdxptype\"\n    }}>{`getMDXPType`}</h2>\n    <p>{`This function can be used to retrieve the MDXP type of a component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`It is recommended to use the `}<a parentName=\"p\" {...{\n          \"href\": \"#checkMDXPType\"\n        }}>{`checkMDXPType`}</a>{` to test for component types,\ninstead of using this function, as the internal implementation of MDXPTypes might change between version.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"arguments-1\"\n    }}>{`Arguments`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'component',\n        type: 'elementType'\n      }}\n      {{\n        name: 'shortCodes',\n        type: 'object',\n        default: '{}',\n        desc: 'Object with all shortCode components that are being used in your Deck. You can `useMDXComponents()` from the _@mdx-js/react_ package in order to get them.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"returns-1\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: 'type',\n        type: '[MDXPTypes](#mdxptypes)',\n        desc: 'Type of the component (default: NONE).'\n      }}\n    </Arguments>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"checkmdxptype\"\n    }}>{`checkMDXPType`}</h2>\n    <p>{`Check whether a component is of a certain `}<a parentName=\"p\" {...{\n        \"href\": \"#MDXPTypes\"\n      }}>{`MDXPType`}</a>{`.  `}</p>\n    <h3 {...{\n      \"id\": \"arguments-2\"\n    }}>{`Arguments`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'component',\n        type: 'elementType'\n      }}\n      {{\n        name: 'type',\n        type: '[MDXPTypes](#mdxptypes)'\n      }}\n      {{\n        name: 'shortCodes',\n        type: 'object',\n        default: '{}',\n        desc: 'Object with all shortCode components that are being used in your Deck. You can `useMDXComponents()` from the _@mdx-js/react_ package in order to get them.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"returns-2\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: 'isOfMDXPType',\n        type: 'bool'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {MDXPTypes, checkMDXPType} from '@mdxp/core'\nimport Component from './component'\n\nif (checkMDXPType(Component, MDXPTypes.LAYOUT)) {\n  // Component is a layout!\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}