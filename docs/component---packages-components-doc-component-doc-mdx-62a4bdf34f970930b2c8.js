(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"+Ee2":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return d})),n.d(t,"default",(function(){return u}));var a=n("Fcif"),o=n("+I+c"),r=(n("mXGw"),n("/FXl")),i=n("TjRS"),s=n("3Lmf"),l=n("PB3g"),p=n("n2/8"),b=n("jCSw"),c=n("Ba27"),d=(n("aD51"),{});void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/components/doc/component.doc.mdx"}});var m={_frontmatter:d},h=i.a;function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(h,Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"components"},"Components"),Object(r.b)("p",null,"This page contains the documentation for all regular Components that the ",Object(r.b)("inlineCode",{parentName:"p"},"@mdxp/components")," package has to offer."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"autostepper"},"AutoStepper"),Object(r.b)("p",null,"This component does not render anything, but can be used to automatically step through your slide.\nIt is best used as a direct child of your slide and should not be nested inside other components."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","By setting the ",Object(r.b)("inlineCode",{parentName:"p"},"end")," value to 0, you will automatically step through your deck until you reach the next slide.")),Object(r.b)("h3",{id:"properties"},"Properties"),Object(r.b)(s.a,{mdxType:"Arguments"},{name:"start",type:"number",desc:"Fist stepIndex for the AutoStepper. If you pass a negative number, it starts to count from the end.",default:"0"},{name:"end",type:"number",desc:"Last stepIndex for the AutoStepper. If you pass 0 or a negative number, it starts to count from the end.",default:"-1"},{name:"time",type:"number",desc:"Time in milliseconds it should wait before automatically stepping.",default:"1000"}),Object(r.b)("h3",{id:"examples"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-mdxp"}),"# SLIDE 1\n\n<Step>\n\n- Step through the slide to show this first bullet point\n- Afterwards, this slide will automatically step through the remaining bullet points\n- Every 1500ms a new bullet shows\n- item 4\n- item 5\n\n</Step>\n<AutoStepper start={1} time={1500} />\n\n---\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"block"},"Block"),Object(r.b)("p",null,"This component will suround its children with an element, which you can style with theme-aware properties.",Object(r.b)("br",{parentName:"p"}),"\n","Besides that, it also allows to set some CSS properties, like the ones needed for children of either 'flex' or 'grid' layouts, by setting it as a property of the component instead of setting it through the ",Object(r.b)("inlineCode",{parentName:"p"},"sx")," property.\nThis allows it to be more easily used in conjunction with the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#flex"}),"Flex")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#grid"}),"Grid")," components."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","You can setup variants of this component with predefined styles, by defining them inside of ",Object(r.b)("inlineCode",{parentName:"p"},"theme.mdxp.block"),".")),Object(r.b)("h3",{id:"properties-1"},"Properties"),Object(r.b)(s.a,{of:l.a,mdxType:"Arguments"}),Object(r.b)("h3",{id:"examples-1"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-mdxp"}),"# SLIDE 1\n\n<Block width=\"50%\" sx={{bg: 'accent'}}>\n\nThis block will take 50% of the surrounding width and have a background color set to the theme accent color.\n\nBlocks can obviously contain multiple elements and by default group them in a div.\nThis component is quite handy in conjunction with columns.\n\n</Block>\n\n---\n\n# SLIDE 2\n\n<Block as=\"em\" sx={{color: 'red'}}>\n\nHere the surrounding element will be an `em` tag.  \nYou can also pass custom components, but beware that you need to put them in between braces instead of quotes : {Component}\n\n</Block>\n\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"flex"},"Flex"),Object(r.b)("p",null,"This element is a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#block"}),"Block")," component, but it has its display property set to 'flex' by default and allows to set any flex-related CSS properties as values on the item itself, without needing to wrap it in an ",Object(r.b)("inlineCode",{parentName:"p"},"sx")," prop."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","If you do not know what ",Object(r.b)("inlineCode",{parentName:"p"},"display: flex")," does, it is highly recommended to read ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox"}),"this flexbox guide"),".\nFlexbox is a super handy tool to quickly create one-dimensional layouts and control how your elements are placed.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","You can setup variants of this component with predefined styles, by defining them inside of ",Object(r.b)("inlineCode",{parentName:"p"},"theme.mdxp.flex"),".")),Object(r.b)("h3",{id:"properties-2"},"Properties"),Object(r.b)(s.a,{of:p.a,mdxType:"Arguments"}),Object(r.b)("h3",{id:"examples-2"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-mdxp"}),'# SLIDE 1\n\n<Flex justifyContent="space-around" alignItems="center" height="100%">\n\n<Block sx={{bg: \'red\'}} height="50px" flexGrow="1" />\n<Block sx={{bg: \'tomato\'}} flexGrow="2">\n\nThese blocks will grow to fill the space! \n\n</Block>\n<Block sx={{bg: \'red\'}} height="50px" flexGrow="1" />\n\n</Flex>\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"grid"},"Grid"),Object(r.b)("p",null,"This element is a ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#block"}),"Block")," component, but it has its display property set to 'grid' by default and allows to set any grid-related CSS properties as values on the item itself, without needing to wrap it in an ",Object(r.b)("inlineCode",{parentName:"p"},"sx")," prop."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","If you do not know what ",Object(r.b)("inlineCode",{parentName:"p"},"display: grid")," does, it is highly recommended to read ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://css-tricks.com/snippets/css/complete-guide-grid"}),"this CSS grid guide"),".\nGrid is the two-dimensional counterpart of the flexbox layout, but there are various other minor differences between both.\nThis ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#Grid_and_flexbox"}),"guide")," does a good job at comparing both layout methods.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","You can setup variants of this component with predefined styles, by defining them inside of ",Object(r.b)("inlineCode",{parentName:"p"},"theme.mdxp.grid"),".")),Object(r.b)("h3",{id:"properties-3"},"Properties"),Object(r.b)(s.a,{of:b.a,mdxType:"Arguments"}),Object(r.b)("h3",{id:"examples-3"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-mdxp"}),"<Grid\n  gridTemplateColumns=\"1fr 3fr 1fr\"\n  gridTemplateRows=\"20% auto 5%\"\n  gridTemplateAreas={['header header header', 'main main sidebar', '. footer .']}\n  gridGap='10px'\n>\n\n<Block gridArea=\"header\" sx={{bg: 'tomato', textAlign: 'center'}}>\n\n## SLIDE 1\n\n</Block>\n\n<Block gridArea=\"main\" sx={{bg: 'tomato'}}>\n\n- Your main content goes here\n- lovely layout\n\n</Block>\n\n<Block gridArea=\"sidebar\" sx={{bg: 'tomato'}}>\n\nSidebar\n\n</Block>\n\n<Block gridArea=\"footer\" sx={{bg: 'tomato'}}>\n \nFooter \n\n</Block>\n\n</Grid>\n\n---\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"place"},"Place"),Object(r.b)("p",null,"This component allows you to absolutely position an element in your slide, effectively taking it outside of the flow of the other elements.",Object(r.b)("br",{parentName:"p"}),"\n","If you do pass neither ",Object(r.b)("em",{parentName:"p"},"left"),", nor ",Object(r.b)("em",{parentName:"p"},"right")," properties, the element will be centered horizontally and similarly for ",Object(r.b)("em",{parentName:"p"},"top")," and ",Object(r.b)("em",{parentName:"p"},"bottom"),".\nCentering happens, by adding a ",Object(r.b)("inlineCode",{parentName:"p"},"transform: translate()")," CSS property, so beware if you pass your own transform property through ",Object(r.b)("em",{parentName:"p"},"sx"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","This component surround its elements with an element, and it is that element that gets placed.",Object(r.b)("br",{parentName:"p"}),"\n","If you use this component to center eg. an image, it is thus important to set your desired width on this element,\nand set the width of the image to 100%.\nOtherwise the image will not look centered, as it is the surrounding element that is centered and not the image.")),Object(r.b)("h3",{id:"properties-4"},"Properties"),Object(r.b)(s.a,{of:c.a,mdxType:"Arguments"}),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-mdxp"}),'# SLIDE 1\nThis paragraph is in the normal flow of the slide\n\n<Place bottom="10px">\n\nThis paragraph gets placed in the bottom center.\n\n</Place>\n\n- This list is placed under the first paragraph\n- Just like if the second paragraph was never there\n\n---\n\n# SLIDE 2\nThe image below gets placed in the center of the slide and takes 50% of the slide width.\n\n<Place sx={{width: \'50%\'}}>\n\n\x3c!-- Note that you can use regular markdown image syntax and set the width through the alt-text --\x3e\n<img width="100%" src="public/logo.svg" />\n\n</Place>\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"styling"},"Styling"),Object(r.b)("p",null,"This component applies any property you pass as a custom style to its child.\nIt applies the styles using the ",Object(r.b)("em",{parentName:"p"},"sx")," property and thus allows the use of theme values."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","This component only allows to have a single child element!")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"NOTE"),Object(r.b)("br",{parentName:"p"}),"\n","You can setup variants of this component with predefined styles, by defining them inside of ",Object(r.b)("inlineCode",{parentName:"p"},"theme.mdxp.styling"),".")),Object(r.b)("h3",{id:"properties-5"},"Properties"),Object(r.b)(s.a,{mdxType:"Arguments"},{name:"children",type:"element",desc:"Single child that gets styled according to the sx property."},{name:"sx",type:"object",default:"{}",desc:"You can style the element by giving an sx property. This is set as a Theme-UI sx property and can thus accept theme aware values."},{name:"variant",type:"string",required:!1,desc:"Variant from 'mdxp.styling.'"},{name:"props",type:"object",required:!1,desc:"Extra properties that get added to the child element."}),Object(r.b)("h3",{id:"examples-4"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-mdxp"}),"# SLIDE 1\n\n<Styling sx={{bg: 'accent', color: 'black', width: '100%', paddingLeft:'50px', listStyleType: 'square'}}>\n\n- This list has a background color set to your theme's accent color\n- The foreground color is set to black\n- We also set a width and paddingLeft property.\n\n</Styling>\n\n---\n")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/components/doc/component.doc.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-components-doc-component-doc-mdx-62a4bdf34f970930b2c8.js.map