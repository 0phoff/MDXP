{"version":3,"sources":["webpack:///../packages/core/doc/hook.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","input","name","type","desc","parentName","isMDXComponent"],"mappings":"oQAOaA,G,UAAe,S,gNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,oIACA,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAWC,OAAO,EAAOD,QAAQ,aAC9B,CACCE,KAAM,OACNC,KAAM,qCACNC,KAAM,2DAEP,CACCF,KAAM,cACNC,KAAM,aACNC,KAAM,iCAEP,CACCF,KAAM,aACNC,KAAM,4BACNC,KAAM,+BAEP,CACCF,KAAM,aACNC,KAAM,aACNC,KAAM,oDAEP,CACCF,KAAM,YACNC,KAAM,2BACNC,KAAM,8BAEP,CACCF,KAAM,eACNC,KAAM,SACNC,KAAM,uCAEP,CACCF,KAAM,UACNC,KAAM,OACNC,KAAM,qGAGV,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,iMAcL,uBACA,iBAAQ,CACN,GAAM,WADR,WAGA,mGACA,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,6CACqC,6BAAGA,WAAW,KAAQ,CACvD,KAAQ,+BADyB,QADrC,8GAMF,iBAAQ,CACN,GAAM,aADR,aAGA,YAAC,IAAD,CAAWL,QAAQ,aAChB,CACCE,KAAM,SACNC,KAAM,aACNC,KAAM,8CAGV,iBAAQ,CACN,GAAM,aADR,WAGA,YAAC,IAAD,CAAWH,OAAO,EAAOD,QAAQ,aAC9B,CACCE,KAAM,YACNC,KAAM,uBACNC,KAAM,wDAGV,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,8QAeL,uBACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,mGACA,iBAAQ,CACN,GAAM,aADR,WAGA,YAAC,IAAD,CAAWJ,OAAO,EAAOD,QAAQ,aAC9B,CACCE,KAAM,OACNC,KAAM,aACNC,KAAM,uCAEP,CACCF,KAAM,WACNC,KAAM,aACNC,KAAM,2CAEP,CACCF,KAAM,YACNC,KAAM,0BACNC,KAAM,kDAEP,CACCF,KAAM,gBACNC,KAAM,0BACNC,KAAM,sDAEP,CACCF,KAAM,WACNC,KAAM,2FACNC,KAAM,qHAEP,CACCF,KAAM,UACNC,KAAM,0BACNC,KAAM,0CAGV,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,iSAcL,uBACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,yIAAwH,kBAAIA,WAAW,MAAvI,qIAEA,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,QAAwC,kBAAIA,WAAW,MAAlF,iCACyB,6BAAGA,WAAW,KAAQ,CAC3C,KAAQ,yDADa,oBADzB,+CAKF,iBAAQ,CACN,GAAM,aADR,WAGA,YAAC,IAAD,CAAWJ,OAAO,EAAOD,QAAQ,aAC9B,CACCE,KAAM,MACNC,KAAM,kCACNC,KAAM,0DAEP,CACCF,KAAM,QACNC,KAAM,qBACNC,KAAM,oCAEP,CACCF,KAAM,SACNC,KAAM,qBACNC,KAAM,sCAGV,iBAAQ,CACN,GAAM,cADR,YAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,sW,8MAkBTR,EAAWS,gBAAiB","file":"component---packages-core-doc-hook-doc-mdx-bd2c0d87a665b472993c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"usedeck\"\n    }}>{`useDeck`}</h2>\n    <p>{`This hook returns the deck context, which is an object with useful information about the state of the deck.`}</p>\n    <h3 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: \"mode\",\n        type: \"[deckModes](./core-util#deckmodes)\",\n        desc: \"The mode that the slide deck is currently displayed as.\"\n      }}\n      {{\n        name: 'slideLength',\n        type: 'number > 0',\n        desc: 'Number of slides in the deck.'\n      }}\n      {{\n        name: 'slideIndex',\n        type: 'number ∈ [0, slideLength[',\n        desc: 'Index of the current slide.'\n      }}\n      {{\n        name: 'stepLength',\n        type: 'number > 0',\n        desc: 'Number of steps that the current slide contains.'\n      }}\n      {{\n        name: 'stepIndex',\n        type: 'number ∈ [0, stepLength[',\n        desc: 'Index of the current step.'\n      }}\n      {{\n        name: 'rawStepIndex',\n        type: 'string',\n        desc: 'Raw step value, as seen in the URL.'\n      }}\n      {{\n        name: 'preview',\n        type: 'bool',\n        desc: 'Whether the slide should be rendered in a static preview mode (mainly used for printing to pdf).'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useDeck} from '@mdxp/core'\n\nconst Footer = (props) => {\n  const deck = useDeck();\n\n  return (\n    <span>\n      {deck.slideIndex} / {deck.slideLength}\n    </span>\n  );\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usestep\"\n    }}>{`useStep`}</h2>\n    <p>{`This hook allows to allocate a certain number of steps for your component.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`If your component is being used in a `}<a parentName=\"p\" {...{\n          \"href\": \"/MDXP/core-components#step\"\n        }}>{`Step`}</a>{`,\nthe returned stepIndex might be -1 to indicate that your component has not been \"stepped\" through yet.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'length',\n        type: 'number > 0',\n        desc: 'The number of steps you need to allocate.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"returns-1\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: 'stepIndex',\n        type: 'number ∈ [-1,length[',\n        desc: 'The current stepIndex your component should follow.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useStep} from '@mdxp/core'\n\nconst ChangeColor = ({children}) => {\n  const colors = ['red', 'green', 'blue'];\n  const stepIndex = useStep(colors.length);\n\n  return (\n    <div style={{color: colors[stepIndex]}}>\n      {children}\n    </div>\n  );\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usenavigation\"\n    }}>{`useNavigation`}</h2>\n    <p>{`This hooks returns an object with a number of useful navigation functions.`}</p>\n    <h3 {...{\n      \"id\": \"returns-2\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: 'next',\n        type: '() => void',\n        desc: 'Navigate to the next step or slide.'\n      }}\n      {{\n        name: 'previous',\n        type: '() => void',\n        desc: 'Navigate to the previous step or slide.'\n      }}\n      {{\n        name: 'nextSlide',\n        type: '(step=0:number) => void',\n        desc: 'Navigate to the next slide and specified step.'\n      }}\n      {{\n        name: 'previousSlide',\n        type: '(step=0:number) => void',\n        desc: 'Navigate to the previous slide and specified step.'\n      }}\n      {{\n        name: 'navigate',\n        type: '(slide:number, step=0:Integer, mode=currentMode:deckMode, replace=false:Boolean) => void',\n        desc: 'Navigate to the specified slide and step (and mode), deciding whether to replace history or add a new page to it.'\n      }}\n      {{\n        name: 'setMode',\n        type: '(mode:deckMode) => void',\n        desc: 'Set the display mode the presentation'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useNavigation} from '@mdxp/core'\n\nconst LinkSlide = ({slide, step, text}) => {\n  const {navigate} = useNavigation();   // Destructure object to extract only navigate\n\n  return (\n    <button onClick={() => {navigate(slide, step)}}>\n      {text}\n    </button>\n  );\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"useresizeobserver\"\n    }}>{`useResizeObserver`}</h2>\n    <p>{`This hooks allows you to get the width and height of a certain HTML element and update your code when it changes.`}<br parentName=\"p\"></br>{`\n`}{`This component has not much to do with presentations, but is used throughout the core codebase and might be useful to use.  `}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`This hook was taken from `}<a parentName=\"p\" {...{\n          \"href\": \"https://tobbelindstrom.com/blog/resize-observer-hook\"\n        }}>{`Tobias Lindström`}</a>{` and adapted to the needs of this project.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"returns-3\"\n    }}>{`Returns`}</h3>\n    <Arguments input={false} mdxType=\"Arguments\">\n      {{\n        name: 'ref',\n        type: 'Function │ { \"current\": \"any\" }',\n        desc: 'Reference to set on an HTML element in your component.'\n      }}\n      {{\n        name: 'width',\n        type: 'number | undefined',\n        desc: 'Width of your element in pixels.'\n      }}\n      {{\n        name: 'height',\n        type: 'number | undefined',\n        desc: 'Height of your element in pixels.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-3\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {useResizeObserver} from '@mdxp/core'\n\nconst ShowDimensions = () => {\n  const [ref, width=0, height=0] = useResizeObserver();   // Give default width and height values\n\n  return (\n    <div ref={ref} style={{width: '100%', height: '100%'}}>\n      This div has the following dimensions: {width} X {height} pixels\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}