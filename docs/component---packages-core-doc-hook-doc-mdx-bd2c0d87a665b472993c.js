(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{l2am:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));var o=n("Fcif"),s=n("+I+c"),a=(n("mXGw"),n("/FXl")),r=n("TjRS"),i=n("3Lmf"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/core/doc/hook.doc.mdx"}});var d={_frontmatter:c},p=r.a;function b(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)(p,Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"usedeck"},"useDeck"),Object(a.b)("p",null,"This hook returns the deck context, which is an object with useful information about the state of the deck."),Object(a.b)("h3",{id:"returns"},"Returns"),Object(a.b)(i.a,{input:!1,mdxType:"Arguments"},{name:"mode",type:"[deckModes](./core-util#deckmodes)",desc:"The mode that the slide deck is currently displayed as."},{name:"slideLength",type:"number > 0",desc:"Number of slides in the deck."},{name:"slideIndex",type:"number ∈ [0, slideLength[",desc:"Index of the current slide."},{name:"stepLength",type:"number > 0",desc:"Number of steps that the current slide contains."},{name:"stepIndex",type:"number ∈ [0, stepLength[",desc:"Index of the current step."},{name:"rawStepIndex",type:"string",desc:"Raw step value, as seen in the URL."},{name:"preview",type:"bool",desc:"Whether the slide should be rendered in a static preview mode (mainly used for printing to pdf)."}),Object(a.b)("h3",{id:"examples"},"Examples"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {useDeck} from '@mdxp/core'\n\nconst Footer = (props) => {\n  const deck = useDeck();\n\n  return (\n    <span>\n      {deck.slideIndex} / {deck.slideLength}\n    </span>\n  );\n}\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"usestep"},"useStep"),Object(a.b)("p",null,"This hook allows to allocate a certain number of steps for your component."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"NOTE"),Object(a.b)("br",{parentName:"p"}),"\n","If your component is being used in a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/MDXP/core-components#step"}),"Step"),',\nthe returned stepIndex might be -1 to indicate that your component has not been "stepped" through yet.')),Object(a.b)("h3",{id:"arguments"},"Arguments"),Object(a.b)(i.a,{mdxType:"Arguments"},{name:"length",type:"number > 0",desc:"The number of steps you need to allocate."}),Object(a.b)("h3",{id:"returns-1"},"Returns"),Object(a.b)(i.a,{input:!1,mdxType:"Arguments"},{name:"stepIndex",type:"number ∈ [-1,length[",desc:"The current stepIndex your component should follow."}),Object(a.b)("h3",{id:"examples-1"},"Examples"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {useStep} from '@mdxp/core'\n\nconst ChangeColor = ({children}) => {\n  const colors = ['red', 'green', 'blue'];\n  const stepIndex = useStep(colors.length);\n\n  return (\n    <div style={{color: colors[stepIndex]}}>\n      {children}\n    </div>\n  );\n}\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"usenavigation"},"useNavigation"),Object(a.b)("p",null,"This hooks returns an object with a number of useful navigation functions."),Object(a.b)("h3",{id:"returns-2"},"Returns"),Object(a.b)(i.a,{input:!1,mdxType:"Arguments"},{name:"next",type:"() => void",desc:"Navigate to the next step or slide."},{name:"previous",type:"() => void",desc:"Navigate to the previous step or slide."},{name:"nextSlide",type:"(step=0:number) => void",desc:"Navigate to the next slide and specified step."},{name:"previousSlide",type:"(step=0:number) => void",desc:"Navigate to the previous slide and specified step."},{name:"navigate",type:"(slide:number, step=0:Integer, mode=currentMode:deckMode, replace=false:Boolean) => void",desc:"Navigate to the specified slide and step (and mode), deciding whether to replace history or add a new page to it."},{name:"setMode",type:"(mode:deckMode) => void",desc:"Set the display mode the presentation"}),Object(a.b)("h3",{id:"examples-2"},"Examples"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {useNavigation} from '@mdxp/core'\n\nconst LinkSlide = ({slide, step, text}) => {\n  const {navigate} = useNavigation();   // Destructure object to extract only navigate\n\n  return (\n    <button onClick={() => {navigate(slide, step)}}>\n      {text}\n    </button>\n  );\n}\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"useresizeobserver"},"useResizeObserver"),Object(a.b)("p",null,"This hooks allows you to get the width and height of a certain HTML element and update your code when it changes.",Object(a.b)("br",{parentName:"p"}),"\n","This component has not much to do with presentations, but is used throughout the core codebase and might be useful to use.  "),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"NOTE"),Object(a.b)("br",{parentName:"p"}),"\n","This hook was taken from ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://tobbelindstrom.com/blog/resize-observer-hook"}),"Tobias Lindström")," and adapted to the needs of this project.")),Object(a.b)("h3",{id:"returns-3"},"Returns"),Object(a.b)(i.a,{input:!1,mdxType:"Arguments"},{name:"ref",type:'Function │ { "current": "any" }',desc:"Reference to set on an HTML element in your component."},{name:"width",type:"number | undefined",desc:"Width of your element in pixels."},{name:"height",type:"number | undefined",desc:"Height of your element in pixels."}),Object(a.b)("h3",{id:"examples-3"},"Examples"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {useResizeObserver} from '@mdxp/core'\n\nconst ShowDimensions = () => {\n  const [ref, width=0, height=0] = useResizeObserver();   // Give default width and height values\n\n  return (\n    <div ref={ref} style={{width: '100%', height: '100%'}}>\n      This div has the following dimensions: {width} X {height} pixels\n    </div>\n  );\n}\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/core/doc/hook.doc.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-core-doc-hook-doc-mdx-bd2c0d87a665b472993c.js.map