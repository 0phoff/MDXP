{"version":3,"sources":["webpack:///../packages/components/doc/component.doc.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","name","type","desc","default","of","Block","Flex","Grid","Place","required","isMDXComponent"],"mappings":"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","file":"component---packages-components-doc-component-doc-mdx-e7d58757598ef369111a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/Documents/code/javascript/mdxp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Arguments from 'gatsby-theme-docz/src/components/arguments.jsx';\nimport { AutoStepper, Block, Flex, Grid, Place, Styling } from '../src/component';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h1>\n    <p>{`This page contains the documentation for all regular Components that the `}<inlineCode parentName=\"p\">{`@mdxp/components`}</inlineCode>{` package has to offer.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"autostepper\"\n    }}>{`AutoStepper`}</h2>\n    <p>{`This component does not render anything, but can be used to automatically step through your slide.\nIt is best used as a direct child of your slide and should not be nested inside other components.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`By setting the `}<inlineCode parentName=\"p\">{`end`}</inlineCode>{` value to 0, you will automatically step through your deck until you reach the next slide.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'start',\n        type: 'number',\n        desc: 'Fist stepIndex for the AutoStepper.',\n        default: '0'\n      }}\n      {{\n        name: 'end',\n        type: 'number',\n        desc: 'Last stepIndex for the AutoStepper. If you pass 0 or a negative number, it starts to count from the end.',\n        default: '-1'\n      }}\n      {{\n        name: 'time',\n        type: 'number',\n        desc: 'Time in milliseconds it should wait before automatically stepping.',\n        default: '1000'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\n\n<Step>\n\n- Step through the slide to show this first bullet point\n- Afterwards, this slide will automatically step through the remaining bullet points\n- Every 1500ms a new bullet shows\n- item 4\n- item 5\n\n</Step>\n<AutoStepper start={1} time={1500} />\n\n---\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"block\"\n    }}>{`Block`}</h2>\n    <p>{`This component will suround its children with an element, which you can style with theme-aware properties.`}<br parentName=\"p\"></br>{`\n`}{`Besides that, it also allows to set any of the CSS properties for children of either 'flex' or 'grid' layouts, by setting it as a property of the component, instead of setting it through the `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` property.\nThis allows it to be more easily used in conjunction with the `}<a parentName=\"p\" {...{\n        \"href\": \"#flex\"\n      }}>{`Flex`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#grid\"\n      }}>{`Grid`}</a>{` components.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`You can also set the CSS width and height of this component through properties on the object.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties-1\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Block} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\n\n<Block width=\"50%\" sx={{bg: 'accent'}}>\n\nThis block will take 50% of the surrounding width and have a background color set to the theme accent color.\n\nBlocks can obviously contain multiple elements and by default group them in a div.\nThis component is quite handy in conjunction with columns.\n\n</Block>\n\n---\n\n# SLIDE 2\n\n<Block as=\"em\" sx={{color: 'red'}}>\n\nHere the surrounding element will be an \\`em\\` tag.  \nYou can also pass custom components, but beware that you need to put them in between braces instead of quotes : {Component}\n\n</Block>\n\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"flex\"\n    }}>{`Flex`}</h2>\n    <p>{`This element is a `}<a parentName=\"p\" {...{\n        \"href\": \"#block\"\n      }}>{`Block`}</a>{` component, but it has its display property set to 'flex' by default and allows to set any flex-related CSS properties as values on the item itself, without needing to wrap it in an `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`If you do not know what `}<inlineCode parentName=\"p\">{`display: flex`}</inlineCode>{` does, it is highly recommended to read `}<a parentName=\"p\" {...{\n          \"href\": \"https://css-tricks.com/snippets/css/a-guide-to-flexbox\"\n        }}>{`this flexbox guide`}</a>{`.\nFlexbox is a super handy tool to quickly create one-dimensional layouts and control how your elements are placed.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties-2\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Flex} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\n\n<Flex justifyContent=\"space-around\" alignItems=\"center\" height=\"100%\">\n\n<Block sx={{bg: 'red'}} height=\"50px\" flexGrow=\"1\" />\n<Block sx={{bg: 'tomato'}} flexGrow=\"2\">\n\nThese blocks will grow to fill the space! \n\n</Block>\n<Block sx={{bg: 'red'}} height=\"50px\" flexGrow=\"1\" />\n\n</Flex>\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"grid\"\n    }}>{`Grid`}</h2>\n    <p>{`This element is a `}<a parentName=\"p\" {...{\n        \"href\": \"#block\"\n      }}>{`Block`}</a>{` component, but it has its display property set to 'grid' by default and allows to set any grid-related CSS properties as values on the item itself, without needing to wrap it in an `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` prop.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`If you do not know what `}<inlineCode parentName=\"p\">{`display: grid`}</inlineCode>{` does, it is highly recommended to read `}<a parentName=\"p\" {...{\n          \"href\": \"https://css-tricks.com/snippets/css/complete-guide-grid\"\n        }}>{`this CSS grid guide`}</a>{`.\nGrid is the two-dimensional counterpart of the flexbox layout, but there are various other minor differences between both.\nThis `}<a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout#Grid_and_flexbox\"\n        }}>{`guide`}</a>{` does a good job at comparing both layout methods.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties-3\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Grid} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"examples-3\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`<Grid\n  gridTemplateColumns=\"1fr 3fr 1fr\"\n  gridTemplateRows=\"20% auto 5%\"\n  gridTemplateAreas={['header header header', 'main main sidebar', '. footer .']}\n  gridGap='10px'\n>\n\n<Block gridArea=\"header\" sx={{bg: 'tomato', textAlign: 'center'}}>\n\n## SLIDE 1\n\n</Block>\n\n<Block gridArea=\"main\" sx={{bg: 'tomato'}}>\n\n- Your main content goes here\n- lovely layout\n\n</Block>\n\n<Block gridArea=\"sidebar\" sx={{bg: 'tomato'}}>\n\nSidebar\n\n</Block>\n\n<Block gridArea=\"footer\" sx={{bg: 'tomato'}}>\n \nFooter \n\n</Block>\n\n</Grid>\n\n---\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"place\"\n    }}>{`Place`}</h2>\n    <p>{`This component allows you to absolutely position an element in your slide, effectively taking it outside of the flow of the other elements.`}<br parentName=\"p\"></br>{`\n`}{`If you do pass neither `}<em parentName=\"p\">{`left`}</em>{`, nor `}<em parentName=\"p\">{`right`}</em>{` properties, the element will be centered horizontally and similarly for `}<em parentName=\"p\">{`top`}</em>{` and `}<em parentName=\"p\">{`bottom`}</em>{`.\nCentering happens, by adding a `}<inlineCode parentName=\"p\">{`transform: translate()`}</inlineCode>{` CSS property, so beware if you pass your own transform property through `}<em parentName=\"p\">{`sx`}</em>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`This component surround its elements with an element, and it is that element that gets placed.`}<br parentName=\"p\"></br>{`\n`}{`If you use this component to center eg. an image, it is thus important to set your desired width on this element,\nand set the width of the image to 100%.\nOtherwise the image will not look centered, as it is the surrounding element that is centered and not the image.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties-4\"\n    }}>{`Properties`}</h3>\n    <Arguments of={Place} mdxType=\"Arguments\" />\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\nThis paragraph is in the normal flow of the slide\n\n<Place bottom=\"10px\">\n\nThis paragraph gets placed in the bottom center.\n\n</Place>\n\n- This list is placed under the first paragraph\n- Just like if the second paragraph was never there\n\n---\n\n# SLIDE 2\nThe image below gets placed in the center of the slide and takes 50% of the slide width.\n\n<Place sx={{width: '50%'}}>\n\n<!-- Note that you can use regular markdown image syntax and set the width through the alt-text -->\n<img width=\"100%\" src=\"public/logo.svg\" />\n\n</Place>\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"styling\"\n    }}>{`Styling`}</h2>\n    <p>{`This component applies any property you pass as a custom style to its child.\nIt applies the styles using the `}<em parentName=\"p\">{`sx`}</em>{` property and thus allows the use of theme values.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE`}</strong><br parentName=\"p\"></br>{`\n`}{`This component only allows to have a single child element!`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"properties-5\"\n    }}>{`Properties`}</h3>\n    <Arguments mdxType=\"Arguments\">\n      {{\n        name: 'sx',\n        type: 'object',\n        default: '{}',\n        desc: 'You can style the element by giving an sx property. This is set as a Theme-UI sx property and can thus accept theme aware values.'\n      }}\n      {{\n        name: 'children',\n        type: 'element',\n        desc: 'Single child that gets styled according to the sx property.'\n      }}\n      {{\n        name: 'props',\n        type: 'object',\n        required: false,\n        desc: 'Extra properties that get added to the child element.'\n      }}\n    </Arguments>\n    <h3 {...{\n      \"id\": \"examples-4\"\n    }}>{`Examples`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdxp\"\n      }}>{`# SLIDE 1\n\n<Styling sx={{bg: 'accent', color: 'black', width: '100%', paddingLeft:'50px', listStyleType: 'square'}}>\n\n- This list has a background color set to your theme's accent color\n- The foreground color is set to black\n- We also set a width and paddingLeft property.\n\n</Styling>\n\n---\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}