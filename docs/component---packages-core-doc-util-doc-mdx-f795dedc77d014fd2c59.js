(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"+B26":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return b}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("mXGw");var o=t("/FXl"),a=t("TjRS"),r=t("3Lmf");t("aD51");function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"packages/core/doc/util.doc.mdx"}});var i={_frontmatter:s},p=a.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(o.b)(p,c({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"deckmodes"},"deckModes"),Object(o.b)("p",null,"Enum object which contains the different modes for the deck to be in.\nIt can be used for with the ",Object(o.b)("inlineCode",{parentName:"p"},"setMode()")," function from the ",Object(o.b)("a",c({parentName:"p"},{href:"/MDXP/core-hooks#usenavigation"}),"useNavigation")," hook."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"const deckModes = {\n  NORMAL:     0,\n  PRESENTER:  1,\n  OVERVIEW:   2,\n  GRID:       3,\n  PRINT:      4,\n}\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"basetheme"},"baseTheme"),Object(o.b)("p",null,"Base theme object that is always being merged into the given theme, to provide sane defaults for some things.\nYou can overwrite any of its properties by providing your own values in your theme."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"const baseTheme = {\n  colors: {\n    text: '#000',\n    background: '#FFF'\n  },\n  fonts: {\n    body: 'system-ui, sans-serif',\n  },\n  fontWeights: {\n    body: 400\n  },\n  lineHeights: {\n    body: 1.5\n  },\n  styles: {\n    root: {\n      fontFamily: 'system-ui, sans-serif'\n    },\n    img: {\n      maxWidth: '100%',\n      maxHeight: '100%',\n      objectFit: 'contain'\n    },\n    Slide: {\n      fontFamily: 'body',\n      fontSize: '1.5rem'\n    }\n  }\n};\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"defaulttheme"},"defaultTheme"),Object(o.b)("p",null,"This is the default theme that is used for your presentation,\nif you do not give one to the ",Object(o.b)("a",c({parentName:"p"},{href:"/MDXP/core-components#deck"}),"Deck")," component."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"const defaultTheme = {\n  colors: {\n    text: '#000',\n    background: '#FFF',\n    primary: '#CCC',\n    secondary: '#555',\n    accent: '#F9AC00',\n    muted: '#888'\n  },\n  fonts: {\n    heading: 'inherit',\n    monospace: 'Menlo, monospace'\n  },\n  fontWeights: {\n    heading: 700\n  },\n  lineHeights: {\n    heading: 1.125\n  },\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n  text: {\n    heading: {\n      fontFamily: 'heading',\n      fontWeight: 'heading',\n      lineHeight: 'heading',\n      textAlign: 'center'\n    }\n  },\n  styles: {\n    h1: {\n      variant: 'text.heading',\n      textTransform: 'uppercase'\n    },\n    h2: {\n      variant: 'text.heading'\n    },\n    h3: {\n      variant: 'text.heading'\n    },\n    h4: {\n      variant: 'text.heading'\n    },\n    h5: {\n      variant: 'text.heading'\n    },\n    h6: {\n      variant: 'text.heading'\n    },\n    code: {\n      fontFamily: 'monospace'\n    },\n    pre: {\n      fontFamily: 'monospace'\n    },\n    table: {\n      fontSize: 'inherit',\n      borderCollapse: 'collapse',\n      borderStyle: 'hidden',\n    },\n    tr : {\n      '& > :first-child': {paddingLeft: 0},\n      '& > :last-child': {paddingRight: 0}\n    },\n    th: {\n      fontWeight: 'bold',\n      borderColor: 'inherit',\n      borderStyle: 'solid',\n      borderWidth: '0 0 2px 0',\n      px: 3,\n      py: 3\n    },\n    td: {\n      borderColor: 'inherit',\n      borderStyle: 'solid',\n      borderWidth: '0 0 1px 0',\n      px: 3,\n      py: 2\n    }\n  }\n};\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"mergethemes"},"mergeThemes"),Object(o.b)("p",null,"This function can be used to merge different theme objects together, overwriting with the latest theme given."),Object(o.b)("h3",{id:"arguments"},"Arguments"),Object(o.b)(r.a,{mdxType:"Arguments"},{name:"...themes",type:"Object",desc:"The theme objects you want to merge together."}),Object(o.b)("h3",{id:"returns"},"Returns"),Object(o.b)(r.a,{input:!1,mdxType:"Arguments"},{name:"combinedTheme",type:"Object",desc:"New Theme-UI theme object, which is the result of merging all passed themes together."}),Object(o.b)("h3",{id:"examples"},"Examples"),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"import {mergeThemes} from '@mdxp/core'\n\nconst combinedTheme = mergeThemes(theme1, theme2, theme3)\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"mdxptypes"},"MDXPTypes"),Object(o.b)("p",null,"Some components hold a special meaning for the MDXP code and will be handled specially.",Object(o.b)("br",{parentName:"p"}),"\n","This is the enum object which contains the different types of special MDXP components."),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"const MDXPTypes = {\n  NONE:     0b0001,\n  LAYOUT:   0b0010,\n  GROUP:    0b0100,\n  WRAPPER:  0b1100,\n};\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"setmdxptype"},"setMDXPType"),Object(o.b)("p",null,"This is a higher-order component, which turns turns your component into a specific ",Object(o.b)("a",c({parentName:"p"},{href:"#MDXPTypes"}),"MDXPType"),"."),Object(o.b)("h3",{id:"arguments-1"},"Arguments"),Object(o.b)(r.a,{mdxType:"Arguments"},{name:"component",type:"elementType"},{name:"...MDXPTypes",type:"[MDXPTypes](#mdxptypes)",desc:"You can pass multiple MDXPTypes to set the component as all of them."}),Object(o.b)("h3",{id:"returns-1"},"Returns"),Object(o.b)(r.a,{input:!1,mdxType:"Arguments"},{name:"component",type:"elementType"}),Object(o.b)("h3",{id:"examples-1"},"Examples"),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"import {MDXPTypes, setMDXPType} from '@mdxp/core'\n\nconst TomatoLayout = ({children, ...props}) => (\n  <div\n    style={{\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      backgroundColor: 'tomato',\n      color: 'white'\n    }}\n  >\n    {children}\n  </div>\n);\n\nexport default setMDXPType(TomatoLayout, MDXPTypes.LAYOUT);\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"getmdxptype"},"getMDXPType"),Object(o.b)("p",null,"This function can be used to retrieve the MDXP type of a component."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"NOTE"),Object(o.b)("br",{parentName:"p"}),"\n","It is recommended to use the ",Object(o.b)("a",c({parentName:"p"},{href:"#checkMDXPType"}),"checkMDXPType")," to test for component types,\ninstead of using this function, as the internal implementation of MDXPTypes might change between version.")),Object(o.b)("h3",{id:"arguments-2"},"Arguments"),Object(o.b)(r.a,{mdxType:"Arguments"},{name:"component",type:"elementType"}),Object(o.b)("h3",{id:"returns-2"},"Returns"),Object(o.b)(r.a,{input:!1,mdxType:"Arguments"},{name:"type",type:"[MDXPTypes](#mdxptypes)",desc:"Type of the component (default: NONE)."}),Object(o.b)("hr",null),Object(o.b)("h2",{id:"checkmdxptype"},"checkMDXPType"),Object(o.b)("p",null,"Check whether a component is of a certain ",Object(o.b)("a",c({parentName:"p"},{href:"#MDXPTypes"}),"MDXPType"),".  "),Object(o.b)("h3",{id:"arguments-3"},"Arguments"),Object(o.b)(r.a,{mdxType:"Arguments"},{name:"component",type:"elementType"},{name:"type",type:"[MDXPTypes](#mdxptypes)"}),Object(o.b)("h3",{id:"returns-3"},"Returns"),Object(o.b)(r.a,{input:!1,mdxType:"Arguments"},{name:"isOfMDXPType",type:"bool"}),Object(o.b)("h3",{id:"examples-2"},"Examples"),Object(o.b)("pre",null,Object(o.b)("code",c({parentName:"pre"},{className:"language-js"}),"import {MDXPTypes, checkMDXPType} from '@mdxp/core'\nimport Component from './component'\n\nif (checkMDXPType(Component, MDXPTypes.LAYOUT)) {\n  // Component is a layout!\n}\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"packages/core/doc/util.doc.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---packages-core-doc-util-doc-mdx-f795dedc77d014fd2c59.js.map